/*
	1.导入
		在Go语言中，一个包可包含多个.go文件(这些文件必须在同一级文件夹中)，只要这些.go文件的头部都使用package关键字声明了同一个包。
		1.1单行导入
			import "fmt"
			import "sync"
		2.2多行导入
			import (
				"fmt"
				"sync"
			)
		如你所见，Go 语言中 导入的包，必须得用双引号包含，在这里吐槽一下。
	2.使用别名
		2.1我们导入了两个具有同一包名的包时产生冲突，此时这里为其中一个包定义别名
		2.2我们导入了一个名字很长的包，为了避免后面都写这么长串的包名，可以这样定义别名
		2.3防止导入的包名和本地的变量发生冲突，比如 path 这个很常用的变量名和导入的标准包冲突。
		import ag "abcdefg"

	3.使用.操作
		import . "fmt"

	4.包的初始化
	每个包都允许有一个 init 函数，当这个包被导入时，会执行该包的这个 init 函数，做一些初始化任务。

	对于 init 函数的执行有几点需要注意
		1.init 函数优先于 main 函数执行
		2.在一个包引用链中，包的初始化是深度优先的。比如，有这样一个包引用关系：main→A→B→C，那么初始化顺序为C.init→B.init→A.init→main
		3.同一个包甚至同一个源文件，可以有多个 init 函数
		4.init 函数不能有入参和返回值
		5.init 函数不能被其他函数调用
		6.同一个包内的多个 init 顺序是不受保证的
		7.在 init 之前，其实会先初始化包作用域的常量和变量（常量优先于变量）
	5.包的匿名导入
		当我们导入一个包时，如果这个包没有被使用到，在编译时，是会报错的。
		但是有些情况下，我们导入一个包，只想执行包里的 init 函数，来运行一些初始化任务，此时怎么办呢？
		可以使用匿名导入，用法如下，其中下划线为空白标识符，并不能被访问
		import _ "image/png"
	7.相对导入和绝对导入

*/

package main

import (
	. "fmt"
	_ "test"
)

func main() {
	Println("hello world")

}
